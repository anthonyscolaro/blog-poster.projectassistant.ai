version: '3.8'

# Staging deployment configuration for Digital Ocean
# This compose file is optimized for deployment on a Digital Ocean Droplet

services:
  api:
    image: blog-poster-api:staging
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog-api-staging
    ports:
      - "80:8088"  # Map to port 80 for easy access
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@vectors:5432/vectors
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - LOG_LEVEL=INFO
      - DEBUG=false
    env_file:
      - .env.staging  # Staging environment variables
    depends_on:
      vectors:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vectors:
    image: pgvector/pgvector:pg16
    container_name: blog-vectors-staging
    environment:
      - POSTGRES_DB=vectors
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: blog-redis-staging
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6384:6379"
    networks:
      - blog-network
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: blog-qdrant-staging
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
    networks:
      - blog-network
    restart: unless-stopped

  # Nginx reverse proxy for SSL termination (optional)
  nginx:
    image: nginx:alpine
    container_name: blog-nginx-staging
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    depends_on:
      - api
    networks:
      - blog-network
    restart: unless-stopped

networks:
  blog-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data: